import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id "de.undercouch.download" version "5.3.0"
}

ext {
    athVersion = '5460.va_c8a_323c73b_a'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

group = 'org.jenkins-ci.plugins'
description = 'Acceptance tests of Gradle plugin'

repositories {
    mavenCentral()
    maven {
        url 'https://repo.jenkins-ci.org/public/'
    }
}

configurations {
    pluginsCollection {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    // same version as used by ATH
    annotationProcessor "org.jenkins-ci:annotation-indexer:1.12"

    implementation "org.jenkins-ci:acceptance-test-harness:${athVersion}"

    testImplementation platform("io.netty:netty-bom:4.1.84.Final")
    testImplementation "io.ratpack:ratpack-test:1.9.0"

    pluginsCollection project(path: ':', configuration: 'pluginsCollectionDist')
}

def testDependenciesDir = layout.buildDirectory.dir('test-dependencies')

def copyTestDependencies = tasks.create("copyTestDependencies", Copy) {
    from configurations.pluginsCollection
    into testDependenciesDir

    include '*.hpi'
    include '*.jpi'
}

def currentJava = JavaVersion.current()

def jenkinsVersions = [
    JenkinsVersion.LATEST,
    JenkinsVersion.LATEST_LTS,
    JenkinsVersion.V2_356
]

def allTestTasks =
    jenkinsVersions
        .findAll { jenkinsVersion ->
            jenkinsVersion.default || currentJava.isCompatibleWith(jenkinsVersion.requiredJavaVersion)
        }
        .collect { jenkinsVersion ->
            def jenkinsWarLocation =
                new File("${project.gradle.gradleUserHomeDir}/jenkins-cache/${jenkinsVersion.version}/jenkins.war")

            def testTask =
                jenkinsVersion.default
                    ? tasks.named("test")
                    : tasks.register("test_${jenkinsVersion.label}", Test)

            testTask.configure {
                dependsOn copyTestDependencies

                onlyIf {
                    // Do not run on Windows as written here: https://github.com/jenkinsci/acceptance-test-harness/blob/master/docs/EXTERNAL.md
                    !OperatingSystem.current().isWindows()
                }

                doFirst {
                    download.run {
                        src jenkinsVersion.downloadUrl
                        dest jenkinsWarLocation
                        onlyIfModified true
                        tempAndMove true
                    }
                }

                // If executed on TeamCity, we need to set the Chromedriver path
                if (gradle.ciTeamCityBuild) {
                    systemProperty 'webdriver.chrome.driver', System.getenv('HOME') + '/.gradle/webdriver/chromedriver/chromedriver'
                }

                environment([
                    JENKINS_WAR: jenkinsWarLocation,
                    LOCAL_JARS : testDependenciesDir.get().file("gradle.hpi"),
                    BROWSER    : gradle.ciJenkinsBuild ? 'firefox-container' : 'chrome'
                ])

                javaLauncher = javaToolchains.launcherFor {
                    languageVersion = jenkinsVersion.javaVersion
                }
            }

            testTask
        }

def testAllTask = tasks.register("testAll") {
    dependsOn allTestTasks
}

tasks.named("check").configure {
    dependsOn testAllTask
}

class JenkinsVersion {

    private static final String LATEST_VERSION = "latest"
    private static final String LATEST_LTS_VERSION = "latest-lts"
    private static final String V2_356_VERSION = '2.356'

    private static final JavaLanguageVersion JAVA_11 = JavaLanguageVersion.of(11)
    private static final JavaLanguageVersion JAVA_8 = JavaLanguageVersion.of(8)

    public static final JenkinsVersion LATEST = of(LATEST_VERSION, JAVA_11)
    public static final JenkinsVersion LATEST_LTS = of(LATEST_LTS_VERSION, JAVA_11)
    public static final JenkinsVersion V2_356 = of(V2_356_VERSION, JAVA_11)

    private static final String MIRROR = 'https://get.jenkins.io'

    final String version
    final URL downloadUrl
    final JavaLanguageVersion javaVersion

    private JenkinsVersion(String version, URL downloadUrl, JavaLanguageVersion javaVersion) {
        this.version = version
        this.downloadUrl = downloadUrl
        this.javaVersion = javaVersion
    }

    boolean isDefault() {
        return version == V2_356_VERSION
    }

    String getLabel() {
        return version.replaceAll("[\\.-]", '_')
    }

    JavaVersion getRequiredJavaVersion() {
        return JavaVersion.toVersion(javaVersion.toString())
    }

    static JenkinsVersion of(String version, JavaLanguageVersion javaVersion = JAVA_8) {
        String downloadUrl
        if (version == LATEST_VERSION) {
            downloadUrl = "${MIRROR}/war/latest/jenkins.war"
        } else if (version == 'latest-lts') {
            downloadUrl = "${MIRROR}/war-stable/latest/jenkins.war"
        } else {
            if (!(version ==~ /^\d+([.]\d+)*?$/)) {
                throw new GradleException("Unsupported Jenkins version '${version}'")
            }
            downloadUrl = "https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${version}/jenkins-war-${version}.war"
        }

        return new JenkinsVersion(version, new URL(downloadUrl), javaVersion)
    }
}

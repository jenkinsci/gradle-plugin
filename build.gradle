import java.util.zip.ZipFile

buildscript { // TODO: remove if https://github.com/jenkinsci/gradle-jpi-plugin/pull/87 is merged & released
  repositories {
    maven {
      url('https://repo.jenkins-ci.org/public/')
    }
    mavenLocal()
  }
  dependencies {
    classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.23.0-SNAPSHOT'
  }
}

plugins {
  //id "org.jenkins-ci.jpi" version "0.23.0" TODO: uncomment if #87 is merged & released
  id 'ru.vyarus.animalsniffer' version '1.3.0'
  id 'findbugs'
  id 'codenarc'
}

apply plugin: 'org.jenkins-ci.jpi' // TODO: remove if #87 is merged & released

group = "org.jenkins-ci.plugins"
description = "This plugin adds Gradle support to Jenkins"

ext.ciBuild = System.getenv()['JENKINS_URL'] ? true : false

if (ciBuild) {
  println 'This build is running on CI'
}

jenkinsPlugin {
  // Version of Jenkins core this plugin depends on.
  coreVersion = "1.642.3"

  // Human-readable name of plugin.
  displayName = "Gradle Plugin"

  // URL for plugin on Jenkins wiki or elsewhere.
  url = "http://wiki.jenkins-ci.org/display/JENKINS/Gradle+Plugin"

  // Plugin URL on GitHub. Optional.
  gitHubUrl = "https://github.com/jenkinsci/gradle-plugin"

  // Plugin ID, defaults to the project name without trailing '-plugin'
  shortName = "gradle"

  compatibleSinceVersion = '1.0'

  developers {
    developer {
      id 'wolfs'
      name 'Stefan Wolf'
    }
  }

  licenses {
    license {
      name 'MIT License'
      distribution 'repo'
      url 'https://opensource.org/licenses/MIT'
    }
  }

  disabledTestInjection = false
}

sourceCompatibility = '1.7'

dependencies {
  compile 'org.jenkins-ci.lib:dry-run-lib:0.1'
  signature 'org.codehaus.mojo.signature:java17:1.0@signature'

  testCompile 'org.spockframework:spock-core:0.7-groovy-1.8'
  jenkinsTest 'org.jenkins-ci.main:jenkins-test-harness:2.22'

  jenkinsPlugins('org.jenkins-ci.plugins:structs:1.7') { transitive = true }
  jenkinsPlugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.11'
  jenkinsTest('org.jenkins-ci.plugins.workflow:workflow-api:2.15') { transitive = true }
  jenkinsTest('org.jenkins-ci.plugins.workflow:workflow-cps:2.32') { transitive = true }
  jenkinsTest 'org.jenkins-ci.plugins.workflow:workflow-job:2.11'
  jenkinsTest 'org.jenkins-ci.plugins.workflow:workflow-basic-steps:2.5'
  jenkinsTest 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.4'
  jenkinsTest 'org.jenkins-ci.plugins.workflow:workflow-support:2.14'
  jenkinsTest 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.9'

  jenkinsTest 'org.jenkins-ci.plugins:scm-api:2.0.7'
  jenkinsTest 'org.jenkins-ci.plugins:script-security:1.26'
  jenkinsTest 'org.jenkins-ci.plugins:durable-task:1.13'
}

if (project.hasProperty("maxParallelForks")) {
  project.maxParallelForks = Integer.valueOf(project.maxParallelForks, 10)
} else {
  ext.maxParallelForks = 3
}

animalsniffer {
  sourceSets = [sourceSets.main]
}

configurations {
  animalsnifferCompileClasspath.extendsFrom compile
  // We need to exclude this dependency from animalsniffer since contains an invalid class
  animalsnifferCompileClasspath.exclude group: 'com.ibm.icu', module: 'icu4j'
}

findbugs {
  toolVersion '3.0.1'
  // This prevents logging some errors when Findbugs tries to open files as jar files.
  // See https://github.com/gradle/gradle/issues/1094.
  sourceSets = [sourceSets.main]
}

findbugsMain {
  classes = sourceSets.main.output
}

animalsnifferMain {
  classpath = configurations.animalsnifferCompileClasspath
}

codenarc {
  toolVersion '0.27.0'
  sourceSets = [sourceSets.test]
}

test {
  systemProperties["hudson.model.DownloadService.noSignatureCheck"] = "true"
  ignoreFailures = ciBuild
  maxParallelForks = project.maxParallelForks
}

def checkArchiveManifest(File archive) {
  new ZipFile(archive).withCloseable { archiveZip ->
    archiveZip.getInputStream(archiveZip.getEntry("META-INF/MANIFEST.MF")).withStream {
      assert it.text.contains("Plugin-Version: ${project.version}"): "Wrong metadate in file ${archive} - run a clean build"
    }
  }
}

tasks.withType(AbstractArchiveTask) {
  inputs.property('pluginVersion') {
    project.version
  }
}

task checkArchiveManifests {
  dependsOn jar, war
  doLast {
    checkArchiveManifest(jar.archivePath)
    checkArchiveManifest(war.archivePath)
  }
}

tasks.withType(AbstractPublishToMaven) {
  dependsOn checkArchiveManifests
}

defaultTasks 'test', 'jpi'

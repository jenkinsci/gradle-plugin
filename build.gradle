import java.util.zip.ZipFile
import com.github.spotbugs.snom.SpotBugsTask
import org.jenkinsci.gradle.plugins.manifest.GenerateJenkinsManifestTask
import org.jenkinsci.gradle.plugins.jpi.deployment.CreateVersionlessLookupTask

plugins {
  id 'org.gradle.test-retry' version '1.5.0'
  id 'org.jenkins-ci.jpi' version '0.47.0'
  id 'ru.vyarus.animalsniffer' version '1.6.0'
  id 'com.github.spotbugs' version '5.0.13'
  id 'codenarc'
  id 'buildlogic.reproducible-archives'
}

group = 'org.jenkins-ci.plugins'
description = 'This plugin adds Gradle support to Jenkins'

ext {
  coreBaseVersion = '2.138'
  corePatchVersion = '4'
  coreBomVersion = '3'
}

jenkinsPlugin {
  // Version of Jenkins core this plugin depends on.
  jenkinsVersion = "${coreBaseVersion}.${corePatchVersion}"

  // Human-readable name of plugin.
  displayName = 'Gradle Plugin'

  // URL for plugin on Jenkins wiki or elsewhere.
  url = 'https://github.com/jenkinsci/gradle-plugin'

  // Plugin URL on GitHub. Optional.
  gitHubUrl = 'https://github.com/jenkinsci/gradle-plugin'

  // Plugin ID, defaults to the project name without trailing '-plugin'
  shortName = 'gradle'

  fileExtension = 'hpi'

  compatibleSinceVersion = '1.0'

  developers {
    developer {
      id = 'wolfs'
      name = 'Stefan Wolf'
    }
  }

  licenses {
    license {
      name = 'MIT License'
      distribution = 'repo'
      url = 'https://opensource.org/licenses/MIT'
    }
  }

  generateTests = true
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }

    registerFeature("optionalPlugin") {
        usingSourceSet(sourceSets.main)
    }
}

configurations {
    includedLibs
    gradlePluginJpi {
        canBeConsumed = true
        canBeResolved = false
    }
}

dependencies {
  api platform("io.jenkins.tools.bom:bom-${coreBaseVersion}.x:${coreBomVersion}")

  implementation 'org.jenkins-ci.plugins:structs'
  implementation 'org.jenkins-ci.plugins.workflow:workflow-api'
  implementation 'org.jenkins-ci.plugins.workflow:workflow-cps'
  implementation 'org.jenkins-ci.plugins.workflow:workflow-job'
  implementation 'org.jenkins-ci.plugins.workflow:workflow-basic-steps'
  implementation 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step'
  implementation 'org.jenkins-ci.plugins.workflow:workflow-step-api'

  optionalPluginImplementation('org.jenkins-ci.main:maven-plugin:3.14') {
    because('Lowest version that works with our dependencies')
  }

  implementation('commons-validator:commons-validator:1.7') {
      exclude group: 'commons-beanutils', module: 'commons-beanutils'
      exclude group: 'commons-logging', module: 'commons-logging'
  }

  includedLibs "com.gradle:gradle-enterprise-maven-extension:${gradle.gradleEnterpriseMavenExtensionVersion}"
  includedLibs "com.gradle:common-custom-user-data-maven-extension:${gradle.commonCustomUserDataMavenExtensionVersion}"
  includedLibs project(path: ':configuration-maven-extension', configuration: 'mvnExtension')

  signature 'org.codehaus.mojo.signature:java18:1.0@signature'

  testImplementation 'org.jenkins-ci.main:jenkins-test-harness:2.56'
  testImplementation 'org.jenkins-ci.main:jenkins-test-harness-tools:2.2'
  testImplementation 'io.jenkins:configuration-as-code:1.4'
  testImplementation 'org.jenkins-ci.plugins:timestamper:1.8.10'
  testImplementation 'org.jenkins-ci.plugins:pipeline-stage-step:2.3'
  testImplementation 'org.jenkins-ci.plugins:pipeline-maven:3.10.0'
  testImplementation 'org.spockframework:spock-core:1.3-groovy-2.4'

  testImplementation('io.ratpack:ratpack-groovy-test:1.9.0') {
    exclude group: 'com.google.guava', module: 'guava'
  }
  testImplementation('com.google.guava:guava:19.0') {
    because('Lowest possible version that works with Jenkins and Ratpack')
  }

  testRuntimeOnly "org.jenkins-ci.main:jenkins-war:${coreBaseVersion}"

  jenkinsServer 'org.jenkins-ci.plugins:git'
}

if (project.hasProperty('maxParallelForks')) {
  project.maxParallelForks = Integer.valueOf(project.maxParallelForks, 10)
} else {
  ext.maxParallelForks = 3
}

animalsniffer {
  toolVersion = '1.18'
  sourceSets = [sourceSets.main]
  // We need to exclude this dependency from animalsniffer since it contains an invalid class
  excludeJars 'icu4j-*'
}

spotbugs {
    toolVersion = '4.7.2'
    excludeFilter = file("spotbugs-exclude.xml")
}

spotbugsTest {
    enabled = false
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

codenarc {
  toolVersion '1.5'
  sourceSets = [sourceSets.test]
}

test {
  systemProperties['hudson.model.DownloadService.noSignatureCheck'] = 'true'
  // override default timeout
  systemProperties['jenkins.test.timeout'] = 300
  ignoreFailures = gradle.ciJenkinsBuild
  maxParallelForks = project.maxParallelForks
  retry {
    if (gradle.isCi) {
      maxRetries = 1
      maxFailures = 10
    }
  }
}

def checkArchiveManifest(File archive) {
  new ZipFile(archive).withCloseable { archiveZip ->
    archiveZip.getInputStream(archiveZip.getEntry('META-INF/MANIFEST.MF')).withStream {
      assert it.text.contains("Plugin-Version: ${project.version}"): "Wrong metadate in file ${archive} - run a clean build"
    }
  }
}

tasks.withType(AbstractArchiveTask) {
  inputs.property('pluginVersion') {
    project.version
  }
}

// See the original configuration: https://github.com/jenkinsci/gradle-jpi-plugin/blob/v0.47.0/src/main/kotlin/org/jenkinsci/gradle/plugins/testing/JpiTestingPlugin.kt#L79
tasks.named('createVersionlessLookup', CreateVersionlessLookupTask) {
    def jpiAllPlugins = project.configurations.named("jpiAllPlugins")
    def runtimeClasspathJenkins = project.configurations.named("runtimeClasspathJenkins")

    allResolvedPlugins.from(jpiAllPlugins, runtimeClasspathJenkins)
    moduleVersionToModule.set(project.provider {
        def artifacts =
            jpiAllPlugins.get().resolvedConfiguration.resolvedArtifacts +
                runtimeClasspathJenkins.get().resolvedConfiguration.resolvedArtifacts

        artifacts.collectEntries {
            [(it.file.name): "${it.name}.jpi"]
        }
    })
}

// See https://github.com/jenkinsci/gradle-jpi-plugin/blob/master/src/main/kotlin/org/jenkinsci/gradle/plugins/manifest/GenerateJenkinsManifestTask.kt#L69
tasks.withType(GenerateJenkinsManifestTask).configureEach {
  version = project.version.toString().replace("-SNAPSHOT", "-dev")
}

task checkArchiveManifests {
  dependsOn jar, jpi
  doLast {
    checkArchiveManifest(jar.archiveFile.get().asFile)
    checkArchiveManifest(jpi.archiveFile.get().asFile)
  }
}

tasks.withType(AbstractPublishToMaven) {
  dependsOn checkArchiveManifests
}

defaultTasks.add 'test'
defaultTasks.add 'jpi'

task createWrapperZip(type: Zip) {
  archiveFileName = 'wrapper.zip'
  destinationDirectory = new File(sourceSets.test.output.resourcesDir, 'gradle')

  from(project.rootDir) {
    include('gradle/**')
    include('gradlew*')
  }
}

processTestResources.dependsOn(createWrapperZip)

task generateVersionFile() {
  var versionsDir = layout.buildDirectory.dir('versions')
  doLast {
      def outputDir = versionsDir.get().asFile
      outputDir.mkdirs()

      new File(outputDir, "gradle-enterprise-maven-extension-version.txt").text = "${gradle.gradleEnterpriseMavenExtensionVersion}"
      new File(outputDir, "common-custom-user-data-maven-extension-version.txt").text = "${gradle.commonCustomUserDataMavenExtensionVersion}"
  }

  inputs.property('gradleEnterpriseMavenExtensionVersion', gradle.gradleEnterpriseMavenExtensionVersion)
  inputs.property('commonCustomUserDataMavenExtensionVersion', gradle.commonCustomUserDataMavenExtensionVersion)

  outputs.dir(versionsDir)
      .withPropertyName('versionsDir')
}

processResources {
    filesMatching("hudson/plugins/gradle/injection/InjectionConfig/help-injectMavenExtension.html") {
        expand([gradleEnterpriseMavenExtensionVersion: gradle.gradleEnterpriseMavenExtensionVersion])
    }
    filesMatching("hudson/plugins/gradle/injection/InjectionConfig/help-injectCcudExtension.html") {
        expand([commonCustomUserDataMavenExtensionVersion: gradle.commonCustomUserDataMavenExtensionVersion])
    }
}

processTestResources {
    from(configurations.includedLibs) {
        into("hudson/plugins/gradle/injection")
    }
    from(generateVersionFile.outputs.files) {
        into("versions")
    }
}

jar {
    from(configurations.includedLibs) {
        into("hudson/plugins/gradle/injection")
    }
    from(generateVersionFile.outputs.files) {
        into("versions")
    }
}

artifacts {
    gradlePluginJpi(jpi)
}
